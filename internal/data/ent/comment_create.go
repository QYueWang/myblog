// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myblog/internal/data/ent/article"
	"myblog/internal/data/ent/comment"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentCreate is the builder for creating a Comment entity.
type CommentCreate struct {
	config
	mutation *CommentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *CommentCreate) SetName(v string) *CommentCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetContent sets the "content" field.
func (_c *CommentCreate) SetContent(v string) *CommentCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetCreateAt sets the "create_at" field.
func (_c *CommentCreate) SetCreateAt(v time.Time) *CommentCreate {
	_c.mutation.SetCreateAt(v)
	return _c
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_c *CommentCreate) SetNillableCreateAt(v *time.Time) *CommentCreate {
	if v != nil {
		_c.SetCreateAt(*v)
	}
	return _c
}

// SetUpdateAt sets the "update_at" field.
func (_c *CommentCreate) SetUpdateAt(v time.Time) *CommentCreate {
	_c.mutation.SetUpdateAt(v)
	return _c
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (_c *CommentCreate) SetNillableUpdateAt(v *time.Time) *CommentCreate {
	if v != nil {
		_c.SetUpdateAt(*v)
	}
	return _c
}

// SetDeleteAt sets the "delete_at" field.
func (_c *CommentCreate) SetDeleteAt(v time.Time) *CommentCreate {
	_c.mutation.SetDeleteAt(v)
	return _c
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (_c *CommentCreate) SetNillableDeleteAt(v *time.Time) *CommentCreate {
	if v != nil {
		_c.SetDeleteAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *CommentCreate) SetID(v string) *CommentCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (_c *CommentCreate) SetArticleID(id string) *CommentCreate {
	_c.mutation.SetArticleID(id)
	return _c
}

// SetNillableArticleID sets the "article" edge to the Article entity by ID if the given value is not nil.
func (_c *CommentCreate) SetNillableArticleID(id *string) *CommentCreate {
	if id != nil {
		_c = _c.SetArticleID(*id)
	}
	return _c
}

// SetArticle sets the "article" edge to the Article entity.
func (_c *CommentCreate) SetArticle(v *Article) *CommentCreate {
	return _c.SetArticleID(v.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (_c *CommentCreate) Mutation() *CommentMutation {
	return _c.mutation
}

// Save creates the Comment in the database.
func (_c *CommentCreate) Save(ctx context.Context) (*Comment, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CommentCreate) SaveX(ctx context.Context) *Comment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CommentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CommentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CommentCreate) defaults() {
	if _, ok := _c.mutation.CreateAt(); !ok {
		v := comment.DefaultCreateAt
		_c.mutation.SetCreateAt(v)
	}
	if _, ok := _c.mutation.UpdateAt(); !ok {
		v := comment.DefaultUpdateAt
		_c.mutation.SetUpdateAt(v)
	}
	if _, ok := _c.mutation.DeleteAt(); !ok {
		v := comment.DefaultDeleteAt
		_c.mutation.SetDeleteAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CommentCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Comment.name"`)}
	}
	if _, ok := _c.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Comment.content"`)}
	}
	if _, ok := _c.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "Comment.create_at"`)}
	}
	if _, ok := _c.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "Comment.update_at"`)}
	}
	if _, ok := _c.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "Comment.delete_at"`)}
	}
	return nil
}

func (_c *CommentCreate) sqlSave(ctx context.Context) (*Comment, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Comment.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CommentCreate) createSpec() (*Comment, *sqlgraph.CreateSpec) {
	var (
		_node = &Comment{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(comment.Table, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(comment.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.CreateAt(); ok {
		_spec.SetField(comment.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := _c.mutation.UpdateAt(); ok {
		_spec.SetField(comment.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := _c.mutation.DeleteAt(); ok {
		_spec.SetField(comment.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if nodes := _c.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ArticleTable,
			Columns: []string{comment.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.article_comments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommentCreateBulk is the builder for creating many Comment entities in bulk.
type CommentCreateBulk struct {
	config
	err      error
	builders []*CommentCreate
}

// Save creates the Comment entities in the database.
func (_c *CommentCreateBulk) Save(ctx context.Context) ([]*Comment, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Comment, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CommentCreateBulk) SaveX(ctx context.Context) []*Comment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CommentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CommentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
