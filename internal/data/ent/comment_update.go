// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myblog/internal/data/ent/article"
	"myblog/internal/data/ent/comment"
	"myblog/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (_u *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *CommentUpdate) SetName(v string) *CommentUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableName(v *string) *CommentUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *CommentUpdate) SetContent(v string) *CommentUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableContent(v *string) *CommentUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetUpdateAt sets the "update_at" field.
func (_u *CommentUpdate) SetUpdateAt(v time.Time) *CommentUpdate {
	_u.mutation.SetUpdateAt(v)
	return _u
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableUpdateAt(v *time.Time) *CommentUpdate {
	if v != nil {
		_u.SetUpdateAt(*v)
	}
	return _u
}

// SetDeleteAt sets the "delete_at" field.
func (_u *CommentUpdate) SetDeleteAt(v time.Time) *CommentUpdate {
	_u.mutation.SetDeleteAt(v)
	return _u
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableDeleteAt(v *time.Time) *CommentUpdate {
	if v != nil {
		_u.SetDeleteAt(*v)
	}
	return _u
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (_u *CommentUpdate) SetArticleID(id string) *CommentUpdate {
	_u.mutation.SetArticleID(id)
	return _u
}

// SetNillableArticleID sets the "article" edge to the Article entity by ID if the given value is not nil.
func (_u *CommentUpdate) SetNillableArticleID(id *string) *CommentUpdate {
	if id != nil {
		_u = _u.SetArticleID(*id)
	}
	return _u
}

// SetArticle sets the "article" edge to the Article entity.
func (_u *CommentUpdate) SetArticle(v *Article) *CommentUpdate {
	return _u.SetArticleID(v.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (_u *CommentUpdate) Mutation() *CommentMutation {
	return _u.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (_u *CommentUpdate) ClearArticle() *CommentUpdate {
	_u.mutation.ClearArticle()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CommentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CommentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CommentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *CommentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(comment.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdateAt(); ok {
		_spec.SetField(comment.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeleteAt(); ok {
		_spec.SetField(comment.FieldDeleteAt, field.TypeTime, value)
	}
	if _u.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ArticleTable,
			Columns: []string{comment.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ArticleTable,
			Columns: []string{comment.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetName sets the "name" field.
func (_u *CommentUpdateOne) SetName(v string) *CommentUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableName(v *string) *CommentUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *CommentUpdateOne) SetContent(v string) *CommentUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableContent(v *string) *CommentUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetUpdateAt sets the "update_at" field.
func (_u *CommentUpdateOne) SetUpdateAt(v time.Time) *CommentUpdateOne {
	_u.mutation.SetUpdateAt(v)
	return _u
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableUpdateAt(v *time.Time) *CommentUpdateOne {
	if v != nil {
		_u.SetUpdateAt(*v)
	}
	return _u
}

// SetDeleteAt sets the "delete_at" field.
func (_u *CommentUpdateOne) SetDeleteAt(v time.Time) *CommentUpdateOne {
	_u.mutation.SetDeleteAt(v)
	return _u
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableDeleteAt(v *time.Time) *CommentUpdateOne {
	if v != nil {
		_u.SetDeleteAt(*v)
	}
	return _u
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (_u *CommentUpdateOne) SetArticleID(id string) *CommentUpdateOne {
	_u.mutation.SetArticleID(id)
	return _u
}

// SetNillableArticleID sets the "article" edge to the Article entity by ID if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableArticleID(id *string) *CommentUpdateOne {
	if id != nil {
		_u = _u.SetArticleID(*id)
	}
	return _u
}

// SetArticle sets the "article" edge to the Article entity.
func (_u *CommentUpdateOne) SetArticle(v *Article) *CommentUpdateOne {
	return _u.SetArticleID(v.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (_u *CommentUpdateOne) Mutation() *CommentMutation {
	return _u.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (_u *CommentUpdateOne) ClearArticle() *CommentUpdateOne {
	_u.mutation.ClearArticle()
	return _u
}

// Where appends a list predicates to the CommentUpdate builder.
func (_u *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Comment entity.
func (_u *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(comment.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdateAt(); ok {
		_spec.SetField(comment.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeleteAt(); ok {
		_spec.SetField(comment.FieldDeleteAt, field.TypeTime, value)
	}
	if _u.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ArticleTable,
			Columns: []string{comment.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ArticleTable,
			Columns: []string{comment.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comment{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
